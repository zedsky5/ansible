---
- name: Analyze Log Times
  hosts: servers

  tasks:
  # T1: Execute a shell command to find and filter log lines.
  - name: Last 20 application timing log lines
    ansible.builtin.shell:
      cmd: "set -o pipefail && grep 'Ultradns quiz application took' /var/log/ultradns-quiz-madeup.log | tail -n 20"
    register: log_lines_output
    # Allows the playbook to continue and handles the error condition in a later task.
    ignore_errors: true
  
  # T2: Pass the collected log lines to the Python script for analysis.
  - name: Mean and standard deviation Python script
    delegate_to: localhost
    ansible.builtin.command: "python3 files/calculate_stats.py"
    args:
      # Pipes log_lines_output.stdout directly into our Python script.
      stdin: "{{ log_lines_output.stdout }}"
    register: stats_result
    when: log_lines_output.rc == 0

  # T3: Calculated statistics for each server.
  - name: 3. Statistic results
    ansible.builtin.debug:
      msg: |
        Server: {{ inventory_hostname }}
        Lines Found: {{ (stats_result.stdout | from_json).line_count }}
        Mean Timing: {{ (stats_result.stdout | from_json).mean }} ms
        Std Deviation: {{ (stats_result.stdout | from_json).std_dev }}
    when: stats_result is defined and not stats_result.failed

  # T4: Message for servers where logs were not found.
  - name: Error handling
    ansible.builtin.debug:
      msg: "Server: {{ inventory_hostname }} - No logs found or log file was missing."
    when: log_lines_output.rc != 0